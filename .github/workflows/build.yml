name: Build

on:
  push:
    branches:
      - main
  release:
    types:
      - created
  workflow_dispatch:

env:
  VERSION: ${{ (github.event.release.tag_name != '' && github.event.release.tag_name) || '0.0.0' }}
  IMAGE_NAME_PREFIX: aoirint/aoirint_mcping_server
  IMAGE_TAG: ${{ github.event.release.tag_name != '' && github.event.release.tag_name || 'latest' }}
  PYTHON_VERSION: '3.11.9'

jobs:
  docker-build-and-push:
    strategy:
      fail-fast: false
      matrix:
        include:
          -
            base_image: 'ubuntu:20.04'
            base_runtime_image: 'ubuntu:20.04'
            image_name_suffix: 'web_api'
            image_target: 'web-api-runtime-env'
          -
            base_image: 'ubuntu:20.04'
            base_runtime_image: 'ubuntu:20.04'
            image_name_suffix: 'bedrock_updater'
            image_target: 'bedrock-updater-runtime-env'
          -
            base_image: 'ubuntu:20.04'
            base_runtime_image: 'ubuntu:20.04'
            image_name_suffix: 'java_updater'
            image_target: 'java-updater-runtime-env'

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Replace Version
        shell: bash
        run: |
          sed -i 's/__version__ = "0.0.0"/__version__ = "${{ env.VERSION }}"/' aoirint_mcping_server/__init__.py
          sed -i "s/version = \"0.0.0\"/version = \"${{ env.VERSION }}\"/" pyproject.toml

      - name: Build and Deploy Docker image
        uses: docker/build-push-action@v5
        env:
          IMAGE_NAME_AND_TAG: ${{ format('{0}_{1}:{2}', env.IMAGE_NAME_PREFIX, matrix.image_name_suffix, env.IMAGE_TAG) }}
          IMAGE_CACHE_FROM: ${{ format('type=registry,ref={0}_{1}:latest-buildcache', env.IMAGE_NAME_PREFIX, matrix.image_name_suffix) }}
          IMAGE_CACHE_TO: ${{ env.IMAGE_TAG == 'latest' && format('type=registry,ref={0}_{1}:latest-buildcache,mode=max', env.IMAGE_NAME_PREFIX, matrix.image_name_suffix) || '' }}
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: ./Dockerfile
          push: true
          target: ${{ matrix.image_target }}
          tags: ${{ env.IMAGE_NAME_AND_TAG }}
          build-args: |
            BASE_IMAGE=${{ matrix.base_image }}
            BASE_RUNTIME_IMAGE=${{ matrix.base_runtime_image }}
            PYTHON_VERSION=${{ env.PYTHON_VERSION }}
          cache-from: ${{ env.IMAGE_CACHE_FROM }}
          cache-to: ${{ env.IMAGE_CACHE_TO }}

  release-binary:
    if: github.event.release.tag_name != ''

    permissions:
      contents: write

    strategy:
      fail-fast: false
      matrix:
        include:
          -
            os: 'ubuntu-20.04'
            asset_name_prefix: aoirint_mcping_server-linux-amd64
            sed: 'sed'
          -
            os: 'windows-2019'
            asset_name_prefix: aoirint_mcping_server-windows-amd64
            sed: 'sed'
          -
            os: 'macos-12'
            asset_name_prefix: aoirint_mcping_server-macos-amd64
            sed: 'gsed'

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Install Poetry
        shell: bash
        run: pipx install poetry

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "${{ env.PYTHON_VERSION }}"
          cache: 'poetry'

      - name: Install Dependencies
        shell: bash
        run: poetry install

      - name: Install gsed for macOS
        if: startsWith(matrix.os, 'macos-')
        shell: bash
        run: |
          brew install gnu-sed

      - name: Replace Version
        shell: bash
        run: |
          ${{ matrix.sed }} -i 's/__version__ = "0.0.0"/__version__ = "${{ env.VERSION }}"/' aoirint_mcping_server/__init__.py
          ${{ matrix.sed }} -i "s/version = \"0.0.0\"/version = \"${{ env.VERSION }}\"/" pyproject.toml

      - name: Build Binary
        shell: bash
        run: |
          poetry run pyinstaller --name "aoirint_mcping_server_web_api" --onefile "aoirint_mcping_server_web_api.py"
          poetry run pyinstaller --name "aoirint_mcping_server_bedrock_updater" --onefile "aoirint_mcping_server_bedrock_updater.py"
          poetry run pyinstaller --name "aoirint_mcping_server_java_updater" --onefile "aoirint_mcping_server_java_updater.py"

      - name: Set asset-basename
        id: asset-basename
        shell: bash
        run: echo "ASSET_BASENAME=${{ matrix.asset_name_prefix }}-${{ env.VERSION }}" >> $GITHUB_OUTPUT

      - name: Create artifact directory for Linux / macOS
        if: startsWith(matrix.os, 'ubuntu-') || startsWith(matrix.os, 'macos-')
        shell: bash
        run: |
          mkdir -p "artifact/${{ steps.asset-basename.outputs.ASSET_BASENAME }}"

          cp dist/aoirint_mcping_server_web_api "artifact/${{ steps.asset-basename.outputs.ASSET_BASENAME }}/"
          cp dist/aoirint_mcping_server_bedrock_updater "artifact/${{ steps.asset-basename.outputs.ASSET_BASENAME }}/"
          cp dist/aoirint_mcping_server_java_updater "artifact/${{ steps.asset-basename.outputs.ASSET_BASENAME }}/"

      - name: Create artifact directory for Windows
        if: startsWith(matrix.os, 'windows-')
        shell: bash
        run: |
          mkdir -p "artifact/${{ steps.asset-basename.outputs.ASSET_BASENAME }}"

          cp dist/aoirint_mcping_server_web_api.exe "artifact/${{ steps.asset-basename.outputs.ASSET_BASENAME }}/"
          cp dist/aoirint_mcping_server_bedrock_updater.exe "artifact/${{ steps.asset-basename.outputs.ASSET_BASENAME }}/"
          cp dist/aoirint_mcping_server_java_updater.exe "artifact/${{ steps.asset-basename.outputs.ASSET_BASENAME }}/"

      - name: Compress tar.gz
        if: startsWith(matrix.os, 'ubuntu-')
        shell: bash
        run: |
          cd artifact
          tar cfzv "${{ steps.asset-basename.outputs.ASSET_BASENAME }}.tar.gz" "${{ steps.asset-basename.outputs.ASSET_BASENAME }}/"

      - name: Compress zip
        if: startsWith(matrix.os, 'windows-') || startsWith(matrix.os, 'macos-')
        shell: bash
        run: |
          cd artifact
          7z a "${{ steps.asset-basename.outputs.ASSET_BASENAME }}.zip" "${{ steps.asset-basename.outputs.ASSET_BASENAME }}/"

      - name: Upload tar.gz to Release
        if: startsWith(matrix.os, 'ubuntu-')
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.release.tag_name }}
          target_commitish: ${{ github.sha }}
          files: artifact/*.tar.gz

      - name: Upload zip to Release
        if: startsWith(matrix.os, 'windows-') || startsWith(matrix.os, 'macos-')
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.release.tag_name }}
          target_commitish: ${{ github.sha }}
          files: artifact/*.zip
